---
import { DashboardLinks } from "@types";
import { Icon } from "astro-icon/components";

const isOpen: boolean = false;
---

<div
    id="sidebar"
    data-status={isOpen ? "open" : "close"}
    class:list={[
        "transition-all duration-300 bg-neutral-900 border-r border-neutral-800 h-full",
        isOpen ? "w-64" : "w-20",
    ]}
>
    <div class="">
        <a href="/">
            <Icon
                name="logo"
                class:list={["", isOpen ? "text-2xl" : "w-10 text-2xl"]}
            />
        </a>
    </div>

    <div class:list={["px-3 py-4", isOpen ? "flex" : "w-full flex"]}>
        <ul
            class:list={[
                "w-full",
                isOpen
                    ? ""
                    : "content-center items-center justify-center m-auto",
            ]}
        >
            {
                DashboardLinks.map(({ icon, label, href }) => (
                    <a
                        href={href}
                        class="flex gap-4 justify-between text-neutral-500 font-semibold hover:bg-neutral-950 hover:text-neutral-200 hover:cursor-pointer hover:font-medium mr-2 hover:rounded-r-lg"
                    >
                        a
                    </a>
                ))
            }
        </ul>
    </div>
</div>

<script>
    function initializeSidebar() {
        const sidebar = document.getElementById("sidebar");
        if (!sidebar) return;

        // Load saved state from localStorage
        const savedState = localStorage.getItem("sidebarState");
        if (savedState) {
            sidebar.dataset.state = savedState;
            updateSidebarClass(sidebar, savedState === "open");
        }

        // Listen for Ctrl + S or Cmd + S (for Mac users)
        document.addEventListener(
            "keydown",
            (e) => {
                // Check for Ctrl+S or Cmd+S (Mac)
                if ((e.ctrlKey || e.metaKey) && e.key.toLowerCase() === "s") {
                    // Prevent the default browser save action
                    e.preventDefault();
                    e.stopPropagation();

                    const currentState = sidebar.dataset.state;
                    const newState =
                        currentState === "open" ? "closed" : "open";

                    // Update state
                    sidebar.dataset.state = newState;
                    localStorage.setItem("sidebarState", newState);
                    updateSidebarClass(sidebar, newState === "open");

                    // Prevent any other handlers from executing
                    return false;
                }
            },
            { capture: true },
        ); // Use capture phase to intercept before other handlers
    }

    function updateSidebarClass(sidebar: HTMLElement, isOpen: boolean) {
        if (isOpen) {
            sidebar.classList.remove("w-20");
            sidebar.classList.add("w-64");
        } else {
            sidebar.classList.remove("w-64");
            sidebar.classList.add("w-20");
        }
    }

    // Initialize when the DOM is ready
    document.addEventListener("DOMContentLoaded", initializeSidebar);
</script>
